      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-ignore


npm create vite@latest my-app -- --template react-ts


https://tailwindcss.com/docs/installation

const objectD = d.map((n, index) => {
  return { index: index, value: n };
});


const objectD2 = d.map((n, index) => ({ index: index, value: n }));


const objectD3 = d.map((value, index) => ({ index, value }));


console.log("Zadatak 3", objectD, objectD2, objectD3);

npm install --save-dev prettier
npm install --save-dev eslint-plugin-prettier eslint-config-prettier

import esLintConfigPrettier from "eslint-config-prettier"
import esLintPluginPrettier from "eslint-plugin-prettier/recommended"

extends: [js.configs.recommended, ...tseslint.configs.recommended, esLintConfigPrettier, esLintPluginPrettier],

    rules: {
      ...reactHooks.configs.recommended.rules,
      "react-refresh/only-export-components": ["warn", { allowConstantExport: true }],
      "prettier/prettier": [
        "warn",
        {
          endOfLine: "auto",
        },
      ],
    },

export default function App() {
  return (
    <div className="container">
      <span>Education</span>
      <span>Continuous education is one of the crucial factors for success.</span>
    </div>
  );
.container {
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  align-items: center;
  gap: 16px;
  width: 100%;
}

import "./Button.css";


interface ButtonProps {
  label: string;
  onClick?: () => void;
}


export default function Button({ label, onClick }: ButtonProps) {
  return (
    <button className="button" onClick={onClick}>
      {label}
    </button>
  );
}

import { useState } from "react";
import Button from "./Button";


export default function Counter() {
  const [counter, setCounter] = useState(0);


  const incrementCounter = () => {
    setCounter((oldCounter) => oldCounter + 1);
  };


  return <Button label={`Kliknut ${counter} puta`} onClick={incrementCounter} />;
  //   return <button onClick={onClick}>Kliknut {counter} puta</button>;
}


import "./App.css";
import Button from "./components/Button";
import Counter from "./components/Counter";
import Title from "./components/Title";


export default function App() {
  const title = "Education";
  return (
    <div className="container">
      <Title title={title} />
      <span>Continuous education is one of the crucial factors for success.</span>
      <Counter />
      <Button label="Label" />
    </div>
  );
}


#root {
  width: 100%;
}

.CourseCard {
  display: flex;
  flex-direction: column;
  justify-content: start;
  border-radius: 0.5rem;
  overflow: hidden;
  background-color: white;
  position: relative;
}


.Duration {
  font-weight: lighter;
  text-align: start;
  padding: 0.25rem;
}


.Type {
  border-radius: 1rem;
  background-color: #e0e0e0;
  padding-left: 0.25rem;
  padding-right: 0.25rem;
  position: absolute;
  top: 0.25rem;
  left: 0.25rem;
  font-weight: bold;
  text-transform: uppercase;
}
import "./CourseCard.css";


interface CourseCardProps {
  src: string;
  type: string;
  title: string;
  duration: number;
}


export default function CourseCard({
  src,
  title,
  type,
  duration,
}: CourseCardProps) {
  return (
    <div className="CourseCard">
      <img src={src} alt={title} />
      <span>{title}</span>
      <span className="Type">{type}</span>
      <span className="Duration">
        {duration} days
      </span>
    </div>
  );
}
.Courses {
  display: grid;
  grid-template-columns: repeat(
    3,
    minmax(0, 1fr)
  );
  gap: 0.5rem;
}
background-color: #f1f5f9;
#e2e8f0




.container {
  width: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
}


.App {
  max-width: 1280px;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  align-items: center;
  gap: 16px;
}

.NavBar {
    background-color: white;
    width: 100%;
    height: 2rem;
}

.NavBar {
    background-color: white;
    width: 100%;
    height: 2rem;
}
.NavBar {
  background-color: white;
  width: 100%;
  height: 2rem;
  position: sticky;
  top: 0;
  z-index: 50;
}
.NavBar {
  background-color: white;
  width: 100%;
  min-height: 2rem;
  position: sticky;
  top: 0;
  z-index: 50;
  padding: 0.5rem;
  display: flex;
  flex-direction: row;
  justify-content: start;
  text-align: center;
  align-items: center;
}


.actions {
  display: flex;
  flex-direction: row;
  justify-content: end;
  gap: 0.5rem;
}

import "./Button.css";


interface ButtonProps {
  label: string;
  onClick?: () => void;
}


export default function Button({
  label,
  onClick,
}: ButtonProps) {
  return (
    <button className="button" onClick={onClick}>
      {label}
    </button>
  );
}


.button {
    background-color: white;
    color: red;
}



"@typescript-eslint/no-unused-expressions": ["warn"],
"@typescript-eslint/no-unused-vars": ["warn"],
"unused-imports/no-unused-imports": "warn",

    rules: {
      ...reactHooks.configs.recommended.rules,
      "react-refresh/only-export-components": ["warn", { allowConstantExport: true }],
      "prettier/prettier": [
        "warn",
        {
          endOfLine: "auto",
        },
      ],
      "@typescript-eslint/no-unused-expressions": ["warn"],
      "@typescript-eslint/no-unused-vars": ["warn"],
      "unused-imports/no-unused-imports": "warn",
    },
import {
  createContext,
  useContext,
  useState,
} from "react";


interface LanguageContextValues {
  language: string;
}


const LanguageContext =
  createContext<LanguageContextValues>({
    language: "hr",
  });


export default function LanguageProvider({
  children,
}: React.PropsWithChildren) {
  const [language, setLanguage] = useState("hr");


  return (
    <LanguageContext.Provider
      value={{ language: language }}
    >
      {children}
    </LanguageContext.Provider>
  );
}


export function useLanguageContext() {
  const context = useContext(LanguageContext);


  return context;
}


  const [value, setValue] = useState("hr");


  const onChange = (
    event: ChangeEvent<HTMLSelectElement>
  ) => {
    setValue(event.target.value);
  };
function LanguagePicker() {
  const context = useLanguageContext();


  return (
    <select
      onChange={() => {}}
      value={context.language}
    >
      <option value="en">EN</option>
      <option value="hr">HR</option>
    </select>
  );
}
function LanguagePicker() {
  const { language, setLanguage } =
    useLanguageContext();


  const onChange = (
    event: ChangeEvent<HTMLSelectElement>
  ) => {
    setLanguage(event.target.value);
  };


  return (
    <select onChange={onChange} value={language}>
      <option value="en">EN</option>
      <option value="hr">HR</option>
    </select>
  );
}

import { ChangeEvent } from "react";


interface SelectProps {
  value: string;
  setValue: (value: string) => void;
  options: { value: string; title: string }[];
}


export default function Select({
  value,
  setValue,
  options,
}: SelectProps) {
  const onChange = (
    event: ChangeEvent<HTMLSelectElement>
  ) => {
    setValue(event.target.value);
  };


  return (
    <select onChange={onChange} value={value}>
      {options.map((option) => (
        <option value={option.value}>
          {option.title}
        </option>
      ))}
    </select>
  );
}


function LanguagePicker() {
  const { language, setLanguage } =
    useLanguageContext();


  return (
    <Select
      value={language}
      setValue={setLanguage}
      options={[
        { title: "HR", value: "hr" },
        { title: "EN", value: "en" },
      ]}
    />
  );
}



.Field {
  display: flex;
  flex-direction: column;
  gap: 0.25rem;
}


import "./Input.css";


interface InputProps {
  name: string;
  label: string;
}


export default function Input({
  name,
  label,
}: InputProps) {
  return (
    <div className="Field">
      <label htmlFor={name}>{label}</label>
      <input id={name} name={name} />
    </div>
  );
}



  const onSubmit = (
    event: React.FormEvent<HTMLFormElement>
  ) => {
    event.preventDefault();
    const formData = new FormData(event.target);


    const data = {};


    formData.forEach((value, key) => {
      data[key] = value;
    });


    console.log(data);
  };



